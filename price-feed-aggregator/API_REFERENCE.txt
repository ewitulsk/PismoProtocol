# Price Feed Aggregator WebSocket API Reference

This document describes the WebSocket API for the Price Feed Aggregator service, which provides real-time cryptocurrency price data from multiple sources including Pyth Network and Polygon.io.

## Connection Details

- **WebSocket URL**: `ws://localhost:8765` (default, configurable)
- **Protocol**: WebSocket (RFC 6455)

## Message Format

All messages are sent as JSON strings. Each message has a `type` field that determines the message type and dictates the rest of the message structure.

## Client to Server Messages

### 1. Subscribe to a Single Feed

Subscribes to price updates for a single feed.

```json
{
    "type": "subscribe",
    "feed_id": "e62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43",
    "ticker": "X:BTCUSD",
    "timespan": "minute"
}
```

**Parameters:**
- `feed_id` (required): The Pyth Network feed ID for the price feed.
- `ticker` (optional): The Polygon.io ticker symbol (e.g., "X:BTCUSD").
- `timespan` (optional, default: "minute"): The Polygon.io timeframe for bar data. Options: "minute", "hour", "day", "week", "month".

If `ticker` is omitted, only Pyth data will be used. If provided, data from both sources will be combined.

### 2. Subscribe to Multiple Feeds

Subscribes to price updates for multiple feeds at once.

```json
{
    "type": "subscribe_multiple",
    "subscriptions": [
        {
            "feed_id": "e62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43",
            "ticker": "X:BTCUSD",
            "timespan": "minute"
        },
        {
            "feed_id": "ff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace",
            "ticker": "X:ETHUSD",
            "timespan": "minute"
        }
    ]
}
```

**Parameters:**
- `subscriptions` (required): An array of subscription objects, each with:
  - `feed_id` (required): The Pyth Network feed ID.
  - `ticker` (optional): The Polygon.io ticker symbol.
  - `timespan` (optional, default: "minute"): The Polygon.io timeframe.

### 3. Unsubscribe from a Feed

Unsubscribes from price updates for a specific feed.

```json
{
    "type": "unsubscribe",
    "feed_id": "e62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43"
}
```

**Parameters:**
- `feed_id` (required): The Pyth Network feed ID to unsubscribe from.

### 4. Get Available Feeds

Requests a list of available price feeds.

```json
{
    "type": "get_available_feeds"
}
```

No additional parameters are required.

## Server to Client Messages

### 1. Connection Established

Sent when a client successfully connects to the WebSocket server.

```json
{
    "type": "connection_established",
    "client_id": "917734bd-73e5-42ef-9e26-acb48ea74bbb",
    "message": "Connected to Price Feed Aggregator Websocket Server"
}
```

**Fields:**
- `client_id`: A unique identifier for the client's connection.
- `message`: A welcome message.

### 2. Subscription Confirmed

Sent when a subscription request is successfully processed.

```json
{
    "type": "subscription_confirmed",
    "feed_id": "e62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43",
    "ticker": "X:BTCUSD"
}
```

**Fields:**
- `feed_id`: The Pyth Network feed ID that was subscribed to.
- `ticker`: The Polygon.io ticker if provided, otherwise null.

### 3. Unsubscription Confirmed

Sent when an unsubscribe request is successfully processed.

```json
{
    "type": "unsubscription_confirmed",
    "feed_id": "e62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43",
    "ticker": "X:BTCUSD"
}
```

**Fields:**
- `feed_id`: The Pyth Network feed ID that was unsubscribed from.
- `ticker`: The Polygon.io ticker if it was part of the subscription, otherwise null.

### 4. Available Feeds

Sent in response to a `get_available_feeds` request.

```json
{
    "type": "available_feeds",
    "feeds": [
        {
            "id": "e62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43",
            "symbol": "BTC/USD",
            "price_type": "price",
            "has_polygon_data": true,
            "polygon_ticker": "X:BTCUSD"
        },
        {
            "id": "ff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace",
            "symbol": "ETH/USD",
            "price_type": "price",
            "has_polygon_data": true,
            "polygon_ticker": "X:ETHUSD"
        }
    ]
}
```

**Fields:**
- `feeds`: An array of available price feeds with the following properties:
  - `id`: The Pyth Network feed ID.
  - `symbol`: The human-readable symbol for the price feed (e.g., "BTC/USD").
  - `price_type`: The type of price feed (usually "price").
  - `has_polygon_data`: Boolean indicating if Polygon.io data is available for this feed.
  - `polygon_ticker`: The corresponding Polygon.io ticker if available.

### 5. Price Update

Sent when a price update is received from either Pyth Network or Polygon.io.

```json
{
    "type": "price_update",
    "data": {
        "symbol": "BTC/USD",
        "price": 42685.75,
        "confidence": 2.4271,
        "timestamp": "2025-03-08T21:45:32.123456",
        "source_priority": "pyth",
        "has_pyth_data": true,
        "has_polygon_data": true,
        "pyth_data": {
            "id": "e62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43",
            "price": 42682.41,
            "conf": 2.4271,
            "expo": -8,
            "publish_time": "2025-03-08T21:45:32.123456",
            "status": "trading",
            "ema_price": 42654.32,
            "ema_conf": 2.39851
        },
        "polygon_data": {
            "ticker": "X:BTCUSD",
            "timestamp": "2025-03-08T21:45:00.000000",
            "open": 42650.25,
            "high": 42750.80,
            "low": 42580.15,
            "close": 42695.30,
            "volume": 1250.45,
            "vwap": 42685.75,
            "number_of_trades": 3250
        }
    }
}
```

**Fields:**
- `data`: The aggregated price data with the following properties:
  - `symbol`: The human-readable symbol for the price feed (e.g., "BTC/USD").
  - `price`: The current aggregated price value.
  - `confidence`: The confidence interval for the price, if available.
  - `timestamp`: The timestamp of the price update.
  - `source_priority`: The data source with priority ("pyth" or "polygon").
  - `has_pyth_data`: Boolean indicating if Pyth Network data is included.
  - `has_polygon_data`: Boolean indicating if Polygon.io data is included.
  - `pyth_data`: Detailed Pyth Network price data (if available) with:
    - `id`: The Pyth Network feed ID.
    - `price`: The price value from Pyth (raw value, must be scaled by 10^expo).
    - `conf`: The confidence interval (raw value, must be scaled by 10^expo).
    - `expo`: The exponent to scale the price and confidence values.
    - `publish_time`: The time the price was published.
    - `status`: The trading status ("trading", "halted", "auction", "unknown").
    - `ema_price`: The exponential moving average price (raw value).
    - `ema_conf`: The EMA confidence interval (raw value).
  - `polygon_data`: Detailed Polygon.io price data (if available) with:
    - `ticker`: The Polygon.io ticker symbol.
    - `timestamp`: The timestamp of the bar data.
    - `open`: The opening price.
    - `high`: The highest price in the period.
    - `low`: The lowest price in the period.
    - `close`: The closing price.
    - `volume`: The trading volume.
    - `vwap`: The volume-weighted average price.
    - `number_of_trades`: The number of trades in the period.

### 6. Error Message

Sent when an error occurs processing a client request.

```json
{
    "type": "error",
    "message": "Invalid subscription: feed ID not found"
}
```

**Fields:**
- `message`: A description of the error that occurred.

## Data Source Priority

When both Pyth Network and Polygon.io data are available, the server prioritizes Pyth Network data for real-time price information because:

1. Pyth provides lower latency, more frequent updates.
2. Pyth includes confidence intervals for price data.

Polygon.io data is used as a supplementary source, providing historical context and additional market information like OHLCV (Open, High, Low, Close, Volume) data.

## Common Feed IDs and Tickers

| Asset    | Pyth Feed ID                                                      | Polygon Ticker |
|----------|-------------------------------------------------------------------|---------------|
| BTC/USD  | e62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43 | X:BTCUSD      |
| ETH/USD  | ff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace | X:ETHUSD      |
| SOL/USD  | ef0d8b6fda2ceba41da15d4095d1da392a0d2f8ed0c6c7bc0f4cfac8c280b56d | X:SOLUSD      |

For a complete list of available feeds, use the `get_available_feeds` request.

## Example Flow

1. Connect to the WebSocket server.
2. Receive a `connection_established` message with your client ID.
3. Request available feeds with `get_available_feeds`.
4. Receive an `available_feeds` message with the list of feeds.
5. Subscribe to one or more feeds with `subscribe` or `subscribe_multiple`.
6. Receive `subscription_confirmed` messages for each subscription.
7. Begin receiving `price_update` messages in real-time.
8. Unsubscribe from feeds with `unsubscribe` when done.
9. Close the WebSocket connection when finished.

## Error Handling

If the server encounters an error processing a request, it will respond with an error message. Common errors include:

- Invalid feed ID or ticker symbol.
- Missing required parameters.
- Internal server errors.

If the WebSocket connection is lost, clients should implement reconnection logic with exponential backoff.